import cv2
import mediapipe as mp
import pyautogui
import time
import math
import numpy as np

class HandGestureController:
    def __init__(self):
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MediaPipe
        self.mp_hands = mp.solutions.hands
        self.mp_drawing = mp.solutions.drawing_utils
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=1,
            min_detection_confidence=0.7,
            min_tracking_confidence=0.6,
            model_complexity=0
        )
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ!")
            exit()
        
        self.cap.set(cv2.CAP_PROP_FPS, 30)
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.reset_timers()
        self.screenshot_count = 0
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.screenshot_delay = 2.0
        self.scroll_cooldown = 0.1
        self.horizontal_scroll_cooldown = 0.02
        self.scroll_amount = 40
        self.distance_threshold = 0.05
        
        # ‡∏õ‡∏¥‡∏î fail-safe
        pyautogui.FAILSAFE = False
        
        print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        print("üìñ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        print("   ü§ö 3 ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ä‡∏µ‡πâ,‡∏Å‡∏•‡∏≤‡∏á,‡∏ô‡∏≤‡∏á) = ‡∏ñ‡πà‡∏≤‡∏¢ Screenshot")
        print("   üëÜ ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô = Scroll Up/Down")
        print("   ‚úåÔ∏è  2 ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô (‡∏ä‡∏µ‡πâ,‡∏Å‡∏•‡∏≤‡∏á) = Scroll Left/Right")
        print("   ‚úä ‡∏Å‡∏≥‡∏°‡∏∑‡∏≠ = ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        print("   ‚ùå ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")

    def reset_timers(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.last_screenshot_time = 0
        self.last_scroll_time = 0
        self.last_horizontal_scroll_time = 0
        self.last_gesture = None

    def distance(self, p1, p2):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î 2 ‡∏à‡∏∏‡∏î"""
        return math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2)

    def is_finger_up(self, tip, pip):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        return tip.y < pip.y

    def detect_gesture(self, hand_landmarks):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á"""
        landmarks = hand_landmarks.landmark
        
        try:
            # ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡πâ‡∏ß‡∏ï‡πà‡∏≤‡∏á‡πÜ
            thumb_tip = landmarks[4]
            thumb_mcp = landmarks[1]
            
            index_tip = landmarks[8]
            index_pip = landmarks[6]
            index_mcp = landmarks[5]
            
            middle_tip = landmarks[12]
            middle_pip = landmarks[10]
            middle_mcp = landmarks[9]
            
            ring_tip = landmarks[16]
            ring_pip = landmarks[14]
            ring_mcp = landmarks[13]
            
            pinky_tip = landmarks[20]
            pinky_pip = landmarks[18]
            pinky_mcp = landmarks[17]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏¥‡πâ‡∏ß‡πÑ‡∏´‡∏ô‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô
            index_up = self.is_finger_up(index_tip, index_pip)
            middle_up = self.is_finger_up(middle_tip, middle_pip)
            ring_up = self.is_finger_up(ring_tip, ring_pip)
            pinky_up = self.is_finger_up(pinky_tip, pinky_pip)
            thumb_up = thumb_tip.x < thumb_mcp.x  # ‡∏ô‡∏¥‡πâ‡∏ß‡πÇ‡∏õ‡πâ‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏°‡∏∑‡∏≠
            index_length = self.distance(index_mcp, index_tip)
            index_full_length = self.distance(index_mcp, index_pip) * 2.5
            
            middle_length = self.distance(middle_mcp, middle_tip)
            middle_full_length = self.distance(middle_mcp, middle_pip) * 2.5
            
            ring_length = self.distance(ring_mcp, ring_tip)
            ring_full_length = self.distance(ring_mcp, ring_pip) * 2.5
            
            pinky_length = self.distance(pinky_mcp, pinky_tip)
            pinky_full_length = self.distance(pinky_mcp, pinky_pip) * 2.5
            
            fist_threshold = 0.6
            is_fist = (
                index_length < index_full_length * fist_threshold and
                middle_length < middle_full_length * fist_threshold and
                ring_length < ring_full_length * fist_threshold and
                pinky_length < pinky_full_length * fist_threshold
            )
            
            if is_fist:
                return "fist", {}
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 3 ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô (Screenshot)
            if index_up and middle_up and ring_up and not pinky_up:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ô‡∏¥‡πâ‡∏ß‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô
                index_middle_separated = abs(index_tip.x - middle_tip.x) > 0.03
                middle_ring_separated = abs(middle_tip.x - ring_tip.x) > 0.03
                
                if index_middle_separated and middle_ring_separated:
                    return "three_fingers", {}
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 2 ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô (Horizontal Scroll)
            elif index_up and middle_up and not ring_up and not pinky_up and not thumb_up:
                distance_x = abs(index_tip.x - middle_tip.x)
                return "two_fingers", {"distance": distance_x}
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö 1 ‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô (Vertical Scroll)
            elif index_up and not middle_up and not ring_up and not pinky_up:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ô‡∏¥‡πâ‡∏ß‡∏ä‡∏µ‡πâ
                dx = index_tip.x - index_pip.x
                dy = index_tip.y - index_pip.y
                
                angle_rad = math.atan2(dx, -dy)
                angle_deg = math.degrees(angle_rad)
                if angle_deg < 0:
                    angle_deg += 360
                
                if angle_deg < 30 or angle_deg > 330:
                    return "scroll_up", {}
                elif 150 < angle_deg < 210:
                    return "scroll_down", {}
            
            return "none", {}
            
        except Exception as e:
            print(f"Error in gesture detection: {e}")
            return "none", {}

    def handle_screenshot(self):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢ Screenshot"""
        current_time = time.time()
        if current_time - self.last_screenshot_time > self.screenshot_delay:
            try:
                screenshot = pyautogui.screenshot()
                self.screenshot_count += 1
                filename = f"screenshot_{self.screenshot_count}_{int(time.time())}.png"
                screenshot.save(filename)
                print(f"üì∏ Screenshot saved: {filename}")
                self.last_screenshot_time = current_time
                return True
            except Exception as e:
                print(f"‚ùå Error taking screenshot: {e}")
        return False

    def handle_scroll(self, direction):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á"""
        current_time = time.time()
        if current_time - self.last_scroll_time > self.scroll_cooldown:
            if direction == "up":
                pyautogui.scroll(self.scroll_amount)
                print("‚¨ÜÔ∏è Scroll Up")
            elif direction == "down":
                pyautogui.scroll(-self.scroll_amount)
                print("‚¨áÔ∏è Scroll Down")
            
            self.last_scroll_time = current_time
            return True
        return False

    def handle_horizontal_scroll(self, distance):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô"""
        current_time = time.time()
        if current_time - self.last_horizontal_scroll_time > self.horizontal_scroll_cooldown:
            if distance < self.distance_threshold:
                pyautogui.press('right')
                print("‚û°Ô∏è Scroll Right")
                self.last_horizontal_scroll_time = current_time
                return "RIGHT"
            elif distance > self.distance_threshold:
                pyautogui.press('left')
                print("‚¨ÖÔ∏è Scroll Left")
                self.last_horizontal_scroll_time = current_time
                return "LEFT"
        return "NONE"

    def run(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        screenshot_taken = False
        current_action = "WAITING"
        
        while self.cap.isOpened():
            ret, frame = self.cap.read()
            if not ret:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á")
                break

            # ‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏µ
            frame = cv2.flip(frame, 1)
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            results = self.hands.process(rgb_frame)
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            screenshot_taken = False
            current_action = "WAITING"

            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    # ‡∏ß‡∏≤‡∏î landmarks
                    self.mp_drawing.draw_landmarks(
                        frame, hand_landmarks, self.mp_hands.HAND_CONNECTIONS
                    )
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á
                    gesture_type, gesture_data = self.detect_gesture(hand_landmarks)
                    
                    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
                    if gesture_type == "three_fingers":
                        screenshot_taken = self.handle_screenshot()
                        current_action = "SCREENSHOT"
                        
                    elif gesture_type == "two_fingers":
                        action = self.handle_horizontal_scroll(gesture_data["distance"])
                        current_action = f"H_SCROLL_{action}"
                        
                    elif gesture_type == "scroll_up":
                        self.handle_scroll("up")
                        current_action = "SCROLL_UP"
                        
                    elif gesture_type == "scroll_down":
                        self.handle_scroll("down")
                        current_action = "SCROLL_DOWN"
                        
                    elif gesture_type == "fist":
                        current_action = "STOP"
                        
                    else:
                        current_action = "NONE"

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            y_offset = 30
            
            # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            color = (0, 255, 0) if current_action != "WAITING" else (255, 255, 255)
            cv2.putText(frame, f"Action: {current_action}", (10, y_offset),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
            y_offset += 30
            
            # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Screenshot
            cv2.putText(frame, f"Screenshots: {self.screenshot_count}", (10, y_offset),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)
            y_offset += 25
            
            # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            cv2.putText(frame, "3 fingers = Screenshot | 1 finger = V.Scroll", (10, y_offset),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200, 200, 200), 1)
            y_offset += 20
            cv2.putText(frame, "2 fingers = H.Scroll | Fist = Stop", (10, y_offset),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200, 200, 200), 1)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢ Screenshot
            if screenshot_taken:
                cv2.putText(frame, "SCREENSHOT TAKEN!", (50, 100), 
                          cv2.FONT_HERSHEY_SIMPLEX, 1.2, (0, 255, 0), 3)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            cv2.imshow('Combined Hand Gesture Control', frame)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break

        # ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
        self.cleanup()

    def cleanup(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        self.cap.release()
        cv2.destroyAllWindows()
        self.hands.close()
        print("üëã ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def main():
    controller = HandGestureController()
    try:
        controller.run()
    except KeyboardInterrupt:
        print("\nüõë ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        controller.cleanup()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        controller.cleanup()

if __name__ == "__main__":
    main()
    